version: "3.9"

services:
  # ============================================
  # WEB APPLICATION (Next.js)
  # ============================================
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
    depends_on:
      - postgres
      - redis
      - minio
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${WEB_DOMAIN}`)"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/healthz')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # WORKER (BullMQ Job Processor)
  # ============================================
  worker:
    build:
      context: .
      dockerfile: ./apps/worker/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
    depends_on:
      - postgres
      - redis
      - minio

  # ============================================
  # DATABASE (PostgreSQL)
  # ============================================
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Keep internal - do not expose ports publicly
    # For admin access, use a VPN or SSH tunnel

  # ============================================
  # CACHE & QUEUES (Redis)
  # ============================================
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # OBJECT STORAGE (MinIO - S3 Compatible)
  # ============================================
  minio:
    image: quay.io/minio/minio:RELEASE.2024-10-13T13-34-11Z
    command: server /data --console-address ":9001"
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
    volumes:
      - miniodata:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - "traefik.enable=true"
      # MinIO Console (Admin UI)
      - "traefik.http.routers.minio-console.rule=Host(`${STORAGE_DOMAIN}`)"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
      - "traefik.http.routers.minio-console.entrypoints=websecure"
      - "traefik.http.routers.minio-console.tls=true"
      - "traefik.http.routers.minio-console.tls.certresolver=letsencrypt"
      # MinIO API (S3)
      - "traefik.http.routers.minio-api.rule=Host(`${STORAGE_API_DOMAIN}`)"
      - "traefik.http.routers.minio-api.service=minio-api"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-api.entrypoints=websecure"
      - "traefik.http.routers.minio-api.tls=true"
      - "traefik.http.routers.minio-api.tls.certresolver=letsencrypt"

  # ============================================
  # DATABASE MIGRATIONS
  # ============================================
  migrator:
    image: node:20-bookworm-slim
    depends_on:
      postgres:
        condition: service_healthy
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      DATABASE_URL: ${DATABASE_URL}
    command: >
      bash -c "
        corepack enable &&
        corepack prepare pnpm@9 --activate &&
        pnpm install --frozen-lockfile &&
        pnpm --filter @repo/database db:generate &&
        pnpm --filter @repo/database db:migrate
      "
    restart: "no"

  # ============================================
  # OPTIONAL: WEBSOCKET SERVER
  # ============================================
  # websocket:
  #   build:
  #     context: .
  #     dockerfile: ./apps/websocket/Dockerfile
  #   restart: unless-stopped
  #   environment:
  #     NODE_ENV: production
  #     REDIS_URL: ${REDIS_URL}
  #     PORT: 3001
  #   depends_on:
  #     - redis
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.websocket.rule=Host(`${WS_DOMAIN}`)"
  #     - "traefik.http.services.websocket.loadbalancer.server.port=3001"
  #     - "traefik.http.routers.websocket.entrypoints=websecure"
  #     - "traefik.http.routers.websocket.tls=true"
  #     - "traefik.http.routers.websocket.tls.certresolver=letsencrypt"

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local
  miniodata:
    driver: local
